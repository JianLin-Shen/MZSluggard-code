#if (${PACKAGE_NAME} && ${PACKAGE_NAME} != "")package ${PACKAGE_NAME};#end
import android.content.Context;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import java.util.ArrayList;
import java.util.List;

/**
 * Author: ${USER}
 * Created on ${DATE}
 */
public abstract class ${NAME}<Bean, VH extends BaseViewHolder> extends BaseAdapter implements AdapterRefreshInterface<Bean> {
    protected Context mContext;
    public List<Bean> datas;

    public ${NAME}(Context context, List<Bean> datas) {
        mContext = context;
        if (datas == null) {
            this.datas = new ArrayList<Bean>();
        } else {
            this.datas = datas;
        }
    }

    @Override
    public Bean getItem(int position) {
        return datas == null ? null : datas.get(position);
    }

    @Override
    public int getCount() {
        return datas == null ? 0 : datas.size();
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public final View getView(int position, View convertView, ViewGroup parent) {
        ViewHandler handler = ViewHandler.getHolder(mContext, getItemLayoutId(), position, convertView, parent, this, getViewHolder());
        handler.getViewHolder().mPosition = position;
        Bean bean = getItem(position);
        convertView = handler.getConvert();
        bindData((VH) handler.mViewHolder, bean, convertView, parent);
        return convertView;
    }

    protected abstract void bindData(VH holder, Bean bean, View convertView, ViewGroup parent);

    public abstract void bindListener(VH holder);

    protected abstract int getItemLayoutId();

    protected abstract Class<VH> getViewHolder();

    public void addDataAndUpdateUI(final List<? extends Bean> dataListTemp) {
        datas.addAll(dataListTemp);
        notifyDataSetChanged();
    }

    public void setDataAndUpdateUI(final List<? extends Bean> dataListTemp) {
        datas.clear();
        datas.addAll(dataListTemp);
        notifyDataSetChanged();
    }

    public void clearDataAndUpdateUI() {
        datas.clear();
        notifyDataSetChanged();
    }
}